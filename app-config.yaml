app:
  title: Backstage 1.15.0
  baseUrl: http://localhost:3000

organization:
  name: Janus-IDP

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

proxy:
  '/quay/api':
    target: 'https://quay.io'
    headers:
      X-Requested-With: 'XMLHttpRequest'
    changeOrigin: true
    secure: true

techdocs:
  builder: local
  generator:
    runIn: local
  publisher:
    type: local

auth:
  providers: {}

scaffolder:

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, Group, Resource, Location, Template, API]
  locations:
    - type: url
      target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml

    - type: url
      target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml

  providers:
    keycloakOrg:
      default:
        baseUrl: https://<keycloak_host>/auth
        loginRealm: ${KEYCLOAK_REALM}
        realm: ${KEYCLOAK_REALM}
        clientId: ${KEYCLOAK_CLIENTID}
        clientSecret: ${KEYCLOAK_CLIENTSECRET}

  ocm:
    rosa:
      name: ${OCM_HUB_NAME}
      url: ${OCM_HUB_URL}
      serviceAccountToken: ${moc_infra_token}
      owner: janus-authors

kubernetes:
  customResources:
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'pipelineruns'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'taskruns'
    - group: 'route.openshift.io'
      apiVersion: 'v1'
      plural: 'routes'
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: ${K8S_CLUSTER_NAME}
          url: ${K8S_CLUSTER_URL}
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          serviceAccountToken: ${K8S_CLUSTER_TOKEN}

argocd:
  username: ${ARGOCD_USERNAME}
  password: ${ARGOCD_PASSWORD}
  appLocatorMethods:
    - type: 'config'
      instances:
        - name: argoInstance1
          url: ${ARGOCD_INSTANCE1_URL}
          token: ${ARGOCD_AUTH_TOKEN}
        - name: argoInstance2
          url: ${ARGOCD_INSTANCE2_URL}
          token: ${ARGOCD_AUTH_TOKEN2}
